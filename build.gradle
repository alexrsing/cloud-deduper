/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id 'application'
    id 'java'
    id 'org.beryx.runtime' version '1.12.5'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // https://github.com/microsoftgraph/msgraph-sdk-java
    // Include the sdk as a dependency
    // x-release-please-start-version
    implementation 'com.microsoft.graph:microsoft-graph:6.13.0'

    // x-release-please-end
    // This dependency is only needed if you are using a TokenCredential object for authentication
    implementation 'com.azure:azure-identity:1.11.0'

    // https://mvnrepository.com/artifact/com.microsoft.azure/msal4j
    implementation group: 'com.microsoft.azure', name: 'msal4j', version: '1.14.2'


    // Use Dropbox SDK for program.
    implementation 'com.dropbox.core:dropbox-core-sdk:5.4.4'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    // Writing CSV log file.
    implementation 'com.opencsv:opencsv:5.8'

    implementation 'org.slf4j:slf4j-api:2.0.13'
    implementation 'org.slf4j:slf4j-simple:2.0.13'
}

application {
    // Define the main class for the application.
    mainClass = 'email.sing.tools.dropbox.deduper.CloudDeduper'
}

run {
    standardInput = System.in
}


jar {
    manifest {
        attributes 'Implementation-Title': "Cloud Deduper",
                'Main-Class': 'email.sing.tools.dropbox.deduper.CloudDeduper'
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

runtime {
    jpackage {
        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        if(currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
            imageOptions = ['--win-console']
        } else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'cloud-deduper','--linux-shortcut']
        } else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'cloud-deduper']
            installerType = 'dmg'
        }
    }
}

tasks.jpackage.doFirst {
    def currentOs = org.gradle.internal.os.OperatingSystem.current()
    def basePath = currentOs.windows ? project.name : currentOs.linux ? "$project.name/lib" : "${project.name}.app/Contents"
    copy {
        from('src/main/resources')
        into("$buildDir/jpackage/$basePath/app")
    }
}

